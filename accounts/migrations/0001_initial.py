# Generated by Django 3.1.5 on 2021-01-25 20:37

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('author_attrs', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_author', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('useraccount_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.useraccount')),
            ],
            options={
                'abstract': False,
            },
            bases=('accounts.useraccount',),
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('useraccount_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.useraccount')),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Фамилия')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата ождения')),
                ('country', models.CharField(blank=True, max_length=155, verbose_name='Страна')),
                ('city', models.CharField(blank=True, max_length=155, verbose_name='Город')),
                ('university', models.CharField(blank=True, max_length=255, verbose_name='Учебное заведение')),
                ('faculity', models.CharField(blank=True, max_length=155, verbose_name='Факультет')),
                ('rating', models.PositiveIntegerField(default=0, verbose_name='Рейтинг')),
                ('academic_title', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='author_attrs.academictitle', verbose_name='Научное звание')),
                ('learning_phase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='author_attrs.learningphase', verbose_name='Стадия обучения')),
                ('portfolio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='author_attrs.portfolio', verbose_name='Портфолио')),
                ('scientific_rank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='author_attrs.scientificrank', verbose_name='Ученая степень')),
            ],
            options={
                'abstract': False,
            },
            bases=('accounts.useraccount',),
        ),
    ]
